# clean_markdown.py
#
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
# 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (shallow clone)
# 2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç commit HEAD
# 3. –ï—Å–ª–∏ commit –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É
# 4. –ï—Å–ª–∏ commit –∏–∑–º–µ–Ω–∏–ª—Å—è:
#     - –æ—á–∏—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç markdown-—à—É–º–æ–≤ (html, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏)
#     - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ <repo_name>-clean-docs-for-gpt/
#     - –∫–æ–º–º–∏—Ç–∏—Ç –∏ –ø—É—à–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞:
# - auto (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è
# - manual-review: –≤—ã–≤–æ–¥–∏—Ç commit –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

import os
import yaml
import re
import shutil
import fnmatch
import subprocess
from pathlib import Path
import sys

CONFIG_PATH = Path(".clean-docs-for-gpt_config.yml")
STATE_FILE = Path(".clean-docs-for-gpt/last_source_commit.txt")

def load_config():
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

def get_latest_commit(repo_url):
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ö—ç—à HEAD –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    output = subprocess.check_output(["git", "ls-remote", repo_url, "HEAD"], text=True)
    return output.split()[0]

def get_last_processed_commit():
    # –°—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π commit –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if STATE_FILE.exists():
        return STATE_FILE.read_text().strip()
    return None

def save_commit(commit_hash):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ö—ç—à –≤ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
    STATE_FILE.parent.mkdir(parents=True, exist_ok=True)
    STATE_FILE.write_text(commit_hash)

def match_patterns(path, patterns):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –ø–æ —à–∞–±–ª–æ–Ω–∞–º include/exclude
    return any(fnmatch.fnmatch(path.as_posix(), pattern) for pattern in patterns)

def clean_content(content, ext):
    # –û—á–∏—Å—Ç–∫–∞ markdown-—Ñ–∞–π–ª–æ–≤ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
    if ext in [".md", ".markdown"]:
        content = re.sub(r"!\[.*?\]\(.*?\)", "", content)
        content = re.sub(r"\[([^\]]+)\]\([^\)]+\)", r"\1", content)
        content = re.sub(r"<[^>]+>", "", content)
    return content

def main():
    mode = sys.argv[1] if len(sys.argv) > 1 else "auto"
    cfg = load_config()
    repo_url = cfg["repo_url"]
    include = cfg.get("include", [])
    exclude = cfg.get("exclude", [])
    extensions = cfg.get("extensions", [])

    latest_commit = get_latest_commit(repo_url)
    last_commit = get_last_processed_commit()

    if last_commit == latest_commit:
        print("‚úÖ Documentation is up to date. No changes detected.")
        return

    if mode == "manual-review":
        print("üîç New commit detected:", latest_commit)
        print("Previous commit was:", last_commit)
        print("Please review manually before continuing.")
        return

    repo_name = repo_url.rstrip("/").split("/")[-1]
    output_root = Path(f"{repo_name}-clean-docs-for-gpt")
    if output_root.exists():
        shutil.rmtree(output_root)

    os.system(f"git clone --depth=1 {repo_url} tmp_repo")
    base_path = Path("tmp_repo")

    for file in base_path.rglob("*"):
        if not file.is_file() or file.suffix not in extensions:
            continue
        rel_path = file.relative_to(base_path)
        if not match_patterns(rel_path, include) or match_patterns(rel_path, exclude):
            continue
        out_path = output_root / rel_path
        out_path.parent.mkdir(parents=True, exist_ok=True)
        with open(file, "r", encoding="utf-8", errors="ignore") as f_in:
            raw = f_in.read()
            cleaned = clean_content(raw, file.suffix)
        with open(out_path, "w", encoding="utf-8") as f_out:
            f_out.write(cleaned)

    shutil.rmtree("tmp_repo")

    save_commit(latest_commit)

    os.system("git config user.name 'github-actions[bot]'")
    os.system("git config user.email 'github-actions[bot]@users.noreply.github.com'")
    os.system("git add .")
    os.system(f"git commit -m 'docs: update cleaned docs from {latest_commit}' || echo 'Nothing to commit'")
    os.system("git push")

if __name__ == "__main__":
    main()